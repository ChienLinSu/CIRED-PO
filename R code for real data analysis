##  R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
##  Copyright (C) 2018 The R Foundation for Statistical Computing
### Platform: x86_64-w64-mingw32/x64 (64-bit)


#################################### Load required R packages ######################################################
#####################################################################################################################
library(frailtypack)
library(mvtnorm)
library(numDeriv)
library(Rsolnp)
library(optimx)
library(BB)
library(rootSolve)
library(survival)
library(MASS)
library(nleqslv)
library(reda)
library(geepack)
library(dummies)
library(ggplot2)
library(ggpubr)
library(parallel)
library(SuperLearner)
library(gam)
library(randomForest)


############################################  Prepare the dataset ####################################################
#######################################################################################################################
data(readmission) 
Data=readmission
Data[,7]=ifelse(Data[,7]=="Treated",1,0) ##chemotherapy (Treated=1; NonTreated=0)
Data[,8]=ifelse(Data[,8]=="Male",0,1) ##Male=0; Female=1
Duke_C=ifelse(Data[,9]=="C",1,0) ##Dukes stage(A-B:baseline;)
Duke_D=ifelse(Data[,9]=="D",1,0)
Data=cbind(Data,Duke_C,Duke_D)
n=length(as.numeric(names(table(Data[,1])))) ## number of patients

Chemo=numeric()
Sex=numeric()
duke_C=numeric()
duke_D=numeric()

for(i in 1:n){
location=which(Data[,1]==names(table(Data[,1]))[i])
Chemo[i]=Data[location,7][1]
Sex[i]=Data[location,8][1]
duke_C[i]=Data[location,12][1]
duke_D[i]=Data[location,13][1]
}



############################################  logistic regression for Propensity score ############################################
############################################  and the box plots for the weights (IPTW) ############################################


mylogic<- glm(Chemo~ Sex+duke_C+duke_D , family = "binomial") ## fit logistic regression
summary(mylogic)
mylogic$coef[1]
mylogic$coef[2]


Weight=c()
for(i in 1:n){
if(Chemo[i]==1){
Weight[i]=1+exp(-1*mylogic$coef[1]-mylogic$coef[2]*Sex[i]-mylogic$coef[3]*duke_C[i]-mylogic$coef[4]*duke_D[i])
}else{
Weight[i]=1+exp(mylogic$coef[1]+mylogic$coef[2]*Sex[i]+mylogic$coef[3]*duke_C[i]+mylogic$coef[4]*duke_D[i])
}
}


###### Box Plot for the weight ######

Chemotherapy=ifelse(Chemo==1,"Treat","Non-treat")
Boxplot_data=data.frame(wt=Weight,trt=Chemotherapy)
#boxplot(Weight~Chemotherapy,data=Boxplot_data,main="Weight for Cirque Data",whisklty = 1)

bp<-ggplot(Boxplot_data, aes(x=Chemotherapy, y=wt, fill=Chemotherapy)) 
bp+geom_boxplot()+ stat_boxplot(geom ='errorbar') +
coord_cartesian(ylim = c(1, 4.5))+  ylab("Weight")+scale_x_discrete(name ="Chemotherapy")


############################### Regression estimator based on Semiparametric multiplicative rate (SMR) model#######################
############################### and its corresponding residual plots                                         #######################

## link function h and its derivative
h_function=function(x){
exp(x)
}
h_deri_function=function(x){
exp(x)
}

Obs_time_vec=Data[,"t.stop"]
Delta_vec=Data[,"event"]

Cen_time_vec=c()
for(i in 1:length(table(Data[,"id"]))){
location=which(Data[,"id"]==i & Data[,"event"]==0)
Cen_time_vec=c(Cen_time_vec,Data[location,"t.stop"])
}
number=as.vector(table(Data[,"id"])) ##1:id
Count=c()
for(i in 1:length(Obs_time_vec)){
Count[i]=length(which(Obs_time_vec==Obs_time_vec[i]))
}

At_risk=matrix(0,n,length(Obs_time_vec))
for(i in 1:n){
At_risk[i,]=ifelse(Cen_time_vec[i]>=Obs_time_vec,1,0)
}

###### Construct estimating equation ######
Score_function=function(x){
  
 est_beta_1<-x[1]
 est_beta_2<-x[2]
 est_beta_3<-x[3]
 est_beta_4<-x[4]

 part2=h_deri_function((est_beta_1*Chemo))*Chemo/h_function((est_beta_1*Chemo))
 part3=h_deri_function((est_beta_2*Sex))*Sex/h_function((est_beta_2*Sex))
 part4=h_deri_function((est_beta_3*duke_C))*duke_C/h_function((est_beta_3*duke_C))
 part5=h_deri_function((est_beta_4*duke_D))*duke_D/h_function((est_beta_4*duke_D))

 Q_i_comp2=rep(part2,as.vector(table((Data[,"id"]))))
 Q_i_comp3=rep(part3,as.vector(table((Data[,"id"]))))
 Q_i_comp4=rep(part4,as.vector(table((Data[,"id"]))))
 Q_i_comp5=rep(part5,as.vector(table((Data[,"id"]))))

 comp2_Qi=matrix(part2,length(Chemo),length(Obs_time_vec))
 comp3_Qi=matrix(part3,length(Sex),length(Obs_time_vec))
 comp4_Qi=matrix(part4,length(duke_C),length(Obs_time_vec))
 comp5_Qi=matrix(part5,length(duke_D),length(Obs_time_vec)) 

 h_matrix=matrix(h_function((est_beta_1*Chemo)+(est_beta_2*Sex)+(est_beta_3*duke_C)+(est_beta_4*duke_D)),length(Chemo),length(Obs_time_vec))
  
 Q_bar_comp2=apply(At_risk*comp2_Qi*h_matrix,2,sum)/apply((At_risk*h_matrix),2,sum)
 Q_bar_comp3=apply(At_risk*comp3_Qi*h_matrix,2,sum)/apply((At_risk*h_matrix),2,sum)
 Q_bar_comp4=apply(At_risk*comp4_Qi*h_matrix,2,sum)/apply((At_risk*h_matrix),2,sum)
 Q_bar_comp5=apply(At_risk*comp5_Qi*h_matrix,2,sum)/apply((At_risk*h_matrix),2,sum)
 h_vec=rep(h_function((est_beta_1*Chemo)+(est_beta_2*Sex)+(est_beta_3*duke_C)+(est_beta_4*duke_D)),as.vector(table(Data[,"id"])))
   c(sum((Q_i_comp2-Q_bar_comp2)*(Delta_vec-((h_vec*(((Count*Delta_vec)))/apply((At_risk*h_matrix),2,sum))
))),sum((Q_i_comp3-Q_bar_comp3)*(Delta_vec-((h_vec*(((Count*Delta_vec)))/apply((At_risk*h_matrix),2,sum))
))),sum((Q_i_comp4-Q_bar_comp4)*(Delta_vec-((h_vec*(((Count*Delta_vec)))/apply((At_risk*h_matrix),2,sum))
))),sum((Q_i_comp5-Q_bar_comp5)*(Delta_vec-((h_vec*(((Count*Delta_vec)))/apply((At_risk*h_matrix),2,sum))
)))
)
}

xstart <- c(-0.5,-0.7,0,1)
G.fit=nleqslv(xstart,Score_function, control=list(btol=.01))$x

Baseline=function(t){
if(t==0){
total=0
}else{
V1=unique(sort(c(0,Obs_time_vec[which(Obs_time_vec<=t & Delta_vec==1   )])))####& Delta_vec==1
total=sum(apply(matrix(1:length(V1),1,length(V1)),2,FUN=function(ind){
df=data.frame(x=ifelse(Obs_time_vec==V1[ind] & Delta_vec==1,1,0),id=rep(1:length(Cen_time_vec),number))
denominator=sum(aggregate(df$x, by=list(df$id), FUN=sum)$x)
numerator=sum(as.numeric(V1[ind]<=Cen_time_vec)*h_function((G.fit[1]*Chemo)+(G.fit[2]*Sex)+(G.fit[3]*duke_C)+(G.fit[4]*duke_D)))####
ans=(denominator/numerator)
}## for function
))
}
return(total)
}


###### residual plots based on SMR model ######

Counting_obsnumber=as.vector(table(Data[,"id"]))-1 ##-1 is for last censored
##residual_SMR=c()
XX=matrix(c(1:n),1,n)
residual_SMR=mclapply(XX,function(t){
Counting_obsnumber[t]-Baseline(Cen_time_vec[t])*(exp((G.fit[1]*Chemo[t])+(G.fit[2]*Sex[t])+(G.fit[3]*duke_C[t])+(G.fit[4]*duke_D[t])))
}
)

residual_SMR=unlist(residual_SMR)
Gender=ifelse(Sex==0,"Male","Female")
Treatment=ifelse(Chemo==0,"Nontreated","Treated")
Boxplot_data=data.frame(Residual=residual_SMR,Sex=Gender,Chemotherapy=Treatment)

p1<-ggplot(Boxplot_data, aes(x=Sex, y=Residual, fill=Sex)) +
  geom_boxplot()
p2=ggplot(Boxplot_data, aes(x=Chemotherapy, y=Residual, fill=Chemotherapy)) +
  geom_boxplot()

ggarrange(p1, p2,ncol = 2, nrow = 1)



################################################ Regression estimator based on pseudo observation #####################################
################################################ using generalized linear model (GLM)        #####################################

## Create pseudo-observations based on pre-specified time points
## In general, researchers can choose 5 to 10 equally spaced time points to create pseudo-observations
## Here, we choose observed time points as a time set to create the pseudo-observations

GEE_target_time=unique(sort(Data[,"t.stop"][which(Data[,"event"]==1)]))
XX=matrix(c(1:n),1,n)
Pseudo_value_GEE=mclapply(XX,function(t){ 
location=which(Data[,"id"]==t)
delete_data=Data[-location,]
Output1_MCF=mcf(Recur(t.stop,id,  event) ~ 1, data = Data)@MCF
Output2_MCF=mcf(Recur(t.stop,id,  event) ~ 1, data = delete_data)@MCF
CMF1<-stepfun(Output1_MCF$time, c(0,Output1_MCF$MCF))
CMF2<-stepfun(Output2_MCF$time, c(0,Output2_MCF$MCF))
difference=(n*(CMF1(GEE_target_time)))-((n-1)*(CMF2(GEE_target_time)))
}
)
Pseudo_value_GEE=matrix(unlist(Pseudo_value_GEE),length(GEE_target_time),n)  ## pseudo-observations

##### Fit generalized linear model based on pseudo-observations #####
ID=rep(1:n,each=length(GEE_target_time))
X1=rep(Chemo,each=length(GEE_target_time))
X2=rep(Sex,each=length(GEE_target_time))
X3=rep(duke_C,each=length(GEE_target_time))
X4=rep(duke_D,each=length(GEE_target_time))
pseu_value=(as.vector(Pseudo_value_GEE))

time_variable=c()
for(i in 1:n){
time_variable=rbind(time_variable,dummy(GEE_target_time, sep = "_"))
}

GEE_data=as.data.frame(cbind(ID,pseu_value,X1,X2,X3,X4,time_variable))
xnam <- c(0,names(GEE_data)[3:ncol(GEE_data)])
fmla <- as.formula(paste("pseu_value ~ ", paste(xnam, collapse= "+")))
fit_treat<-geese(fmla, id =ID, data = GEE_data,mean.link="log" ,corstr = "independence")


##### residual plots based on GLM #####

est_time_treat=fit_treat$beta[5: length(fit_treat$beta)] ##find the corresponding position for target times

PO_estimator_treat=c()
PO_estimator_nontreat=c()

for(h in 1:length(est_time_treat)){ 
PO_estimator_treat[h]=mean(exp(est_time_treat[h]+fit_treat$beta[1]*1+fit_treat$beta[2]*Sex+fit_treat$beta[3]*duke_C+fit_treat$beta[4]*duke_D))
PO_estimator_nontreat[h]=mean(exp(est_time_treat[h]+fit_treat$beta[2]*Sex+fit_treat$beta[3]*duke_C+fit_treat$beta[4]*duke_D
))
}


Prediction_crf=apply(matrix(c(1:length(est_time_treat)),nrow=1),2,function(ind){
exp(est_time_treat[ind]+fit_treat$beta[1]*Chemo+fit_treat$beta[2]*Sex+fit_treat$beta[3]*duke_C+fit_treat$beta[4]*duke_D)
})

Pseudo_residual=Pseudo_value_GEE-t(Prediction_crf) 
par(mfrow=c(2,3))

Gender=ifelse(Sex==0,"Male","Female")
Treatment=ifelse(Chemo==0,"Nontreated","Treated")

#### Slected some time points to plot the pseudo-residuals plots ######

q1=which(GEE_target_time==61)
q2=which(GEE_target_time==206)
q3=which(GEE_target_time==453)
q4=which(GEE_target_time==710)
q5=which(GEE_target_time==896)
q6=which(GEE_target_time==1266)


Pseudo_residual_data1=data.frame(Residual=Pseudo_residual[q1,],Sex=Gender,Chemotherapy=Treatment)
Pseudo_residual_data2=data.frame(Residual=Pseudo_residual[q2,],Sex=Gender,Chemotherapy=Treatment)
Pseudo_residual_data3=data.frame(Residual=Pseudo_residual[q3,],Sex=Gender,Chemotherapy=Treatment)
Pseudo_residual_data4=data.frame(Residual=Pseudo_residual[q4,],Sex=Gender,Chemotherapy=Treatment)
Pseudo_residual_data5=data.frame(Residual=Pseudo_residual[q5,],Sex=Gender,Chemotherapy=Treatment)
Pseudo_residual_data6=data.frame(Residual=Pseudo_residual[q6,],Sex=Gender,Chemotherapy=Treatment)

## residuals versus Sex
po1<-ggplot(Pseudo_residual_data1, aes(x=Sex, y=Residual, fill=Sex)) +
  geom_boxplot()+ggtitle("t=61")+  xlab("")+theme(plot.title = element_text(hjust = 0.5))+scale_y_continuous(limits = c(-5, 25))
po2<-ggplot(Pseudo_residual_data2, aes(x=Sex, y=Residual, fill=Sex)) +
  geom_boxplot()+ggtitle("t=206")+  xlab("")+theme(plot.title = element_text(hjust = 0.5))+scale_y_continuous(limits = c(-5, 25)) 
po3<-ggplot(Pseudo_residual_data3, aes(x=Sex, y=Residual, fill=Sex)) +
  geom_boxplot()+ggtitle("t=453")+  xlab("")+theme(plot.title = element_text(hjust = 0.5))+scale_y_continuous(limits = c(-5, 25)) 
po4<-ggplot(Pseudo_residual_data4, aes(x=Sex, y=Residual, fill=Sex)) +
  geom_boxplot()+ggtitle("t=710")+  xlab("")+theme(plot.title = element_text(hjust = 0.5))+scale_y_continuous(limits = c(-5, 25)) 
po5<-ggplot(Pseudo_residual_data5, aes(x=Sex, y=Residual, fill=Sex)) +
  geom_boxplot()+ggtitle("t=896")+  xlab("")+theme(plot.title = element_text(hjust = 0.5))+scale_y_continuous(limits = c(-5, 25)) 
po6<-ggplot(Pseudo_residual_data6, aes(x=Sex, y=Residual, fill=Sex)) +
  geom_boxplot()+ggtitle("t=1266")+  xlab("")+theme(plot.title = element_text(hjust = 0.5))+scale_y_continuous(limits = c(-5, 25))
ggarrange(po1, po2,po3,po4,po5,po6,ncol = 3, nrow = 2, common.legend = TRUE, legend="bottom")

## residuals versus treatment
po1<-ggplot(Pseudo_residual_data1, aes(x=Chemotherapy, y=Residual, fill=Chemotherapy)) +
  geom_boxplot()+ggtitle("t=61")+  xlab("")+theme(plot.title = element_text(hjust = 0.5))+scale_y_continuous(limits = c(-5, 25))
po2<-ggplot(Pseudo_residual_data2, aes(x=Chemotherapy, y=Residual, fill=Chemotherapy)) +
  geom_boxplot()+ggtitle("t=206")+  xlab("")+theme(plot.title = element_text(hjust = 0.5))+scale_y_continuous(limits = c(-5, 25)) 
po3<-ggplot(Pseudo_residual_data3, aes(x=Chemotherapy, y=Residual, fill=Chemotherapy)) +
  geom_boxplot()+ggtitle("t=453")+  xlab("")+theme(plot.title = element_text(hjust = 0.5))+scale_y_continuous(limits = c(-5, 25)) 
po4<-ggplot(Pseudo_residual_data4, aes(x=Chemotherapy, y=Residual, fill=Chemotherapy)) +
  geom_boxplot()+ggtitle("t=710")+  xlab("")+theme(plot.title = element_text(hjust = 0.5))+scale_y_continuous(limits = c(-5, 25)) 
po5<-ggplot(Pseudo_residual_data5, aes(x=Chemotherapy, y=Residual, fill=Chemotherapy)) +
  geom_boxplot()+ggtitle("t=896")+  xlab("")+theme(plot.title = element_text(hjust = 0.5))+scale_y_continuous(limits = c(-5, 25)) 
po6<-ggplot(Pseudo_residual_data6, aes(x=Chemotherapy, y=Residual, fill=Chemotherapy)) +
  geom_boxplot()+ggtitle("t=1266")+  xlab("")+theme(plot.title = element_text(hjust = 0.5))+scale_y_continuous(limits = c(-5, 25))
ggarrange(po1, po2,po3,po4,po5,po6,ncol = 3, nrow = 2, common.legend = TRUE, legend="bottom")



#################################################### Plot cumulative rate function ###############################################
#################################################################################################################################

## choose time points to plot cumulative rate functions
target_time=unique(sort(Data[,"t.stop"])) ## observed time points
#target_time=seq(min(unique(sort(Data[,"t.stop"]))),max(unique(sort(Data[,"t.stop"]))),by=218) ## 10 points

################ IPTW estimator #################
Pseudo_value_IPW=apply(matrix(c(1:n),1,n),2,function(t){ 
location=which(Data[,"id"]==t)
delete_data=Data[-location,]
Output1_MCF=mcf(Recur(t.stop,id,  event) ~ 1, data = Data)@MCF
Output2_MCF=mcf(Recur(t.stop,id,  event) ~ 1, data = delete_data)@MCF
CMF1<-stepfun(Output1_MCF$time, c(0,Output1_MCF$MCF))
CMF2<-stepfun(Output2_MCF$time, c(0,Output2_MCF$MCF))
difference=(n*(CMF1(target_time)))-((n-1)*(CMF2(target_time)))
}
)

IPTW_treat=c()
IPTW_nontreat=c()
for(i in 1:dim(Pseudo_value_IPW)[1]){
IPTW_treat[i]=mean(Pseudo_value_IPW[i,]*Chemo*Weight)
IPTW_nontreat[i]=mean(Pseudo_value_IPW[i,]*(1-Chemo)*Weight)
}


################ Based on GLM using pseudo-observations ################

Pseudo_value_GEE=matrix(unlist(Pseudo_value_IPW),length(target_time),n)
ID=rep(1:n,each=length(target_time))
X1=rep(Chemo,each=length(target_time))
X2=rep(Sex,each=length(target_time))
X3=rep(duke_C,each=length(target_time))
X4=rep(duke_D,each=length(target_time))
pseu_value=(as.vector(Pseudo_value_GEE))

time_variable=c()
for(i in 1:n){
time_variable=rbind(time_variable,dummy(target_time, sep = "_"))
}

GEE_data=as.data.frame(cbind(ID,pseu_value,X1,X2,X3,X4,time_variable))
xnam <- c(0,names(GEE_data)[3:ncol(GEE_data)])
fmla <- as.formula(paste("pseu_value ~ ", paste(xnam, collapse= "+")))
fit_treat<-geese(fmla, id =ID, data = GEE_data,mean.link="log" ,corstr = "independence")


est_time_treat=fit_treat$beta[5: length(fit_treat$beta)] ##find the corresponding position for target times
PO_estimator_treat=c()
PO_estimator_nontreat=c()

for(h in 1:length(target_time)){
PO_estimator_treat[h]=mean(exp(est_time_treat[h]+fit_treat$beta[1]*1+fit_treat$beta[2]*Sex+fit_treat$beta[3]*duke_C+fit_treat$beta[4]*duke_D))
PO_estimator_nontreat[h]=mean(exp(est_time_treat[h]+fit_treat$beta[2]*Sex+fit_treat$beta[3]*duke_C+fit_treat$beta[4]*duke_D
))}


####################### DR estimator based on SMR regression model #########


Reg_treament_value=matrix(0,length(target_time),n)
Reg_control_value=matrix(0,length(target_time),n)
DR_G_treat=c()
DR_G_nontreat=c()

for(g in 1:length(target_time)){
Reg_treament_value[g,]=Baseline(target_time[g])*exp(G.fit[1]*1+G.fit[2]*Sex+G.fit[3]*duke_C+G.fit[4]*duke_D)
Reg_control_value[g,]=Baseline(target_time[g])*exp(G.fit[2]*Sex+G.fit[3]*duke_C+G.fit[4]*duke_D)
DR_G_treat[g]=mean(Pseudo_value_IPW[g,]*Chemo*Weight-(Chemo-pi)*(1/pi)*Reg_treament_value[g,])
DR_G_nontreat[g]=mean(((1-Chemo)*Pseudo_value_IPW[g,]*(1/(1-pi)))+(Chemo-pi)*(1/(1-pi))*Reg_control_value[g,])
}



################# DR estimator based on PO regression ###########

DR_PO_treat=c()
DR_PO_nontreat=c()
for(g in 1:length(target_time)){
DR_PO_treat[g]=mean(Pseudo_value_IPW[g,]*Chemo*Weight-(Chemo-pi)*(1/pi)*PO_estimator_treat[g])
DR_PO_nontreat[g]=mean(((1-Chemo)*Pseudo_value_IPW[g,]*(1/(1-pi)))+(Chemo-pi)*(1/(1-pi))*PO_estimator_nontreat[g])
}
 

############ Nelson Aalen estimator ##############
Treat_data=Data[which(Data[,"chemo"]==1),]
Nontreat_data=Data[which(Data[,"chemo"]==0),]


NA_treat_MCF=mcf(Recur( t.stop,id, event) ~ 1, data = Treat_data)@MCF
NA_nontreat_MCF=mcf(Recur( t.stop,id, event) ~ 1, data = Nontreat_data)@MCF

NA_CMF_treat<-stepfun(NA_treat_MCF$time, c(0,NA_treat_MCF$MCF))
NA_CMF_nontreat<-stepfun(NA_nontreat_MCF$time, c(0,NA_nontreat_MCF$MCF))

NA_Treatment=NA_CMF_treat(target_time)
NA_Nontreatment=NA_CMF_nontreat(target_time)

########### DR estimator based on super learner ########

PS.library <- c("SL.knn", "SL.randomForest","SL.glm")##"SL.glmnet"
my.library<- c("SL.glm","SL.mean","SL.randomForest")

XX=data.frame(Sex,duke_C,duke_D)

SL_logistic<-SuperLearner(Chemo,XX,newX=XX,family=binomial(),SL.library=PS.library
                    ,method = "method.NNLS",control = list(), cvControl = list())
PS_SL<-SL_logistic$SL.predict

Weight_SL=c() 

for(i in 1:n){
if(Chemo[i]==1){
Weight_SL[i]=1/PS_SL[i]
}else{
Weight_SL[i]=1/(1-PS_SL[i])
}
}


X_matrix=data.frame(GEE_data[,c(3:dim(GEE_data)[2])]) 
New_X1=X_matrix
New_X0=X_matrix
New_X1$X1=1
New_X0$X1=0


PO_SL_treat=SuperLearner(GEE_data$pseu_value, X_matrix,newX=New_X1, family = gaussian(),
                  SL.library =my.library,id=GEE_data$ID,,method = "method.NNLS",control = list(), cvControl = list())

PO_SL_untreat=SuperLearner(GEE_data$pseu_value, X_matrix,newX=New_X0, family = gaussian(),
                  SL.library =my.library,id=GEE_data$ID,,method = "method.NNLS",control = list(), cvControl = list())

CRF_treat_SL<-PO_SL_treat$SL.predict
CRF_untreat_SL<-PO_SL_untreat$SL.predict

treat_po_treat=list()
treat_po_untreat=list()

qq=length(target_time)
for(k in 1:n){
treat_po_treat[[k]]=CRF_treat_SL[(qq*(k-1)+1):(qq*k)]
treat_po_untreat[[k]]=CRF_untreat_SL[(qq*(k-1)+1):(qq*k)]
}

CRF_treatment=c()
CRF_nontreatment=c()

for(k in 1:length(target_time)){
d1=as.vector(unlist(lapply(treat_po_treat, "[[", k)))
h1=as.vector(unlist(lapply(treat_po_untreat, "[[", k)))
CRF_treatment[k]=mean(Pseudo_value_IPW[k,]*Chemo*Weight_SL-(Chemo-PS_SL)*(1/PS_SL)*d1)
CRF_nontreatment[k]=mean(((1-Chemo)*Pseudo_value_IPW[k,]*(1/(1-PS_SL)))+(Chemo-PS_SL)*(1/(1-PS_SL))*h1)
}



plot(target_time,NA_Treatment,type="l",lty=3,col="2",xlab="Time (days)",ylab="Cumulative Number of Hospital Readmission",main="The Estimated Cumulative Rate Functions")
lines(target_time,PO_estimator_treat,col="2",lty=2)
lines(target_time,DR_PO_treat,col="2",lty=1)
lines(target_time,CRF_treatment,col="3",lty=5)
lines(target_time,NA_Nontreatment,col="4",lty=3)
lines(target_time,PO_estimator_nontreat,col="4",lty=2)
lines(target_time,DR_PO_nontreat,col="4",lty=1)
lines(target_time,CRF_nontreatment,col="5",lty=5)
legend("topleft",legend=c("Treat (NA)","Treat (PO)","Treat (DR)","Treat (DR with SL)","Nontreat (NA)","Nontreat (PO)","Nontreat (DR)","Nontreat (DR with SL)"),
       col=c("2", "2","2","3","4","4","4","5"),lty=c(3,2,1,5,3,2,1,5), cex=0.85)



################################################## Test Statistics ###################################################
######################################################################################################################

#############################################################################################
#### The following codes are from the function "mcfDiff.test" in the R package "reda"      ##
#### with little revision so that the test statistics can be calculated at a given time Q ##                                                                                  ##
#############################################################################################

Test_function=function (mcf1,QT ,mcf2 = NULL, testVariance = c("robust", "Poisson", 
    "none"), ...) 
{
    testVariance <- match.arg(testVariance)
    #mcfDiff_check(mcf1, mcf2)
    if (testVariance == "none") 
        return(methods::new("mcfDiff.test"))
    if (nrow(mcf1@data) == 0L) {
        warning("No processed data is available from 'mcf1'.", 
            call. = FALSE)
        return(methods::new("mcfDiff.test"))
    }
    mcfCols <- c("time", "numRisk", "instRate", "MCF", "se", 
        "lower", "upper")
    nColMcf <- length(mcfCols)
    mcfColInd <- seq_len(nColMcf)
    datCols <- c("ID", "time", "event", "origin")
    nColDat <- length(datCols)
    datColInd <- seq_len(nColDat)
    time <- NULL
    conv2Survr <- function(mcf_obj) {
        dat <- mcf_obj@data
        first_idx <- !duplicated(dat$id)
        origin_vec <- rep(dat$time1[first_idx], table(factor(dat$id)))
        out <- data.frame(ID = dat$id, time = dat$time2, event = dat$event, 
            origin = origin_vec)
        dat$time1 <- dat$time2 <- dat$id <- dat$event <- dat$terminal <- NULL
        mcf_obj@data <- cbind(out, dat)
        mcf_obj
    }
    mcf1 <- conv2Survr(mcf1)
    if (!is.null(mcf2)) {
        mcf2 <- conv2Survr(mcf2)
    }
    if (mcf1@multiGroup) {
        nLevel <- length(mcf1@origin)
        if (nLevel > 2) 
            stop("There were more than two groups in 'mcf1'.", 
                call. = FALSE)
        uniLevs <- names(mcf1@origin)
        if (!is.null(mcf2)) 
            warning("Only the 'mcf1' object was used.", call. = FALSE)
        getLevs <- function(dat, colInd) {
            paste_ <- function(...) paste(..., sep = "_")
            sapply(seq_len(nrow(dat)), function(i, colInd) {
                paste_(dat[i, -colInd])
            }, colInd)
        }
        datLevs <- getLevs(mcf1@data, datColInd)
        mcfDatLevs <- getLevs(mcf1@MCF, mcfColInd)
        eventDat1 <- base::subset(mcf1@data, datLevs %in% uniLevs[1L])
        mcfDat1 <- base::subset(mcf1@MCF, mcfDatLevs %in% uniLevs[1L], 
            select = mcfCols)
        eventDat2 <- base::subset(mcf1@data, datLevs %in% uniLevs[2L])
        mcfDat2 <- base::subset(mcf1@MCF, mcfDatLevs %in% uniLevs[2L], 
            select = mcfCols)
        originVec <- mcf1@origin
    }
    else {
        if (is.null(mcf2)) 
            stop(wrapMessages("The object 'mcf2' cannot be missing", 
                "if the object 'mcf1' only contains MCF for one group."), 
                call. = FALSE)
        if (mcf2@multiGroup) 
            stop(wrapMessages("The object 'mcf2' should contain MCF for only one group."), 
                call. = FALSE)
        if (nrow(mcf2@data) == 0L) {
            warning("No processed data is available from 'mcf2'.", 
                call. = FALSE)
            return(methods::new("mcfDiff.test"))
        }
        eventDat1 <- mcf1@data
        mcfDat1 <- mcf1@MCF[, mcfCols]
        eventDat2 <- mcf2@data
        mcfDat2 <- mcf2@MCF[, mcfCols]
        originVec <- c(mcf1@origin, mcf2@origin)
    }
    if (diff(originVec) != 0) 
        warning(wrapMessages("The earliest time origins of the two groups were not the same!"), 
            call. = FALSE)
    y_k <- function(eventDat, newTimes) {
        endIdx <- !duplicated(eventDat$ID, fromLast = TRUE)
        endTimeVec <- eventDat$time[endIdx]
        originVec <- eventDat$origin[endIdx]
        if (length(unique(originVec)) > 1) {
            sapply(newTimes, function(a) {
                sum(a >= originVec & a <= endTimeVec)
            })
        }
        else {
            sapply(newTimes, function(a) {
                sum(a <= endTimeVec)
            })
        }
    }
    dLambda_k <- function(mcfDat, newTimes) {
        tmpDat <- base::subset(mcfDat, time %in% newTimes)
        res <- rep(0, length(newTimes))
        names(res) <- as.character(newTimes)
        res[as.character(tmpDat$time)] <- tmpDat$instRate
        res
    }
    uniTimeVec <- sort(unique(c(mcfDat1$time, mcfDat2$time)))[which(sort(unique(c(mcfDat1$time, mcfDat2$time)))<=QT)]
      yVec1 <- y_k(eventDat1, uniTimeVec)
    yVec2 <- y_k(eventDat2, uniTimeVec)
    nonZeroIdx <- yVec1 > 0 & yVec2 > 0
    uniTimeVec <- uniTimeVec[nonZeroIdx]
    yVec1 <- yVec1[nonZeroIdx]
    yVec2 <- yVec2[nonZeroIdx]
    tau <- max(uniTimeVec)
    a_u <- (tau - uniTimeVec)/tau
    w_const <- (yVec1 * yVec2)/(yVec1 + yVec2)
    max_w_const <- max(w_const)
    w_linear <- a_u * w_const
    dLambda1 <- dLambda_k(mcfDat1, uniTimeVec)
    dLambda2 <- dLambda_k(mcfDat2, uniTimeVec)
    jumpDiff <- dLambda1 - dLambda2
    max_jumpDiff <- max(abs(jumpDiff))
    if (max_jumpDiff > 0) {
        re_jumpDiff <- jumpDiff/max_jumpDiff
        reFactor <- exp(log(max_jumpDiff) + log(max_w_const))
    }
    else {
        re_jumpDiff <- 0
        reFactor <- 1
    }
    testU_const <- sum(w_const/max_w_const * re_jumpDiff) * reFactor
    testU_linear <- sum(w_linear/max_w_const * re_jumpDiff) * 
        reFactor
    if (testVariance == "Poisson") {
        varComp <- ifelse(yVec1 > 0, dLambda1/yVec1, 0) + ifelse(yVec2 > 
            0, dLambda2/yVec2, 0)
        varU_const <- sum(w_const^2 * varComp)
        varU_linear <- sum(w_linear^2 * varComp)
        varU <- c(varU_const, varU_linear)
    }
    else {
        var_comp <- function(subDat, yVec, dLambda, uniTimeVec, 
            w_const, w_linear, max_w_const) {
            tmpDat <- base::subset(subDat, time %in% uniTimeVec)
            origin <- subDat$origin[1L]
            cenTime <- with(subDat, time[event <= 0])
            y_i_tj <- as.numeric(uniTimeVec >= origin & uniTimeVec <= 
                cenTime)
            n_i_tj <- rep(0, length(uniTimeVec))
            names(n_i_tj) <- as.character(uniTimeVec)
            tj_i <- unique(tmpDat$time)
            n_i_tj[as.character(tj_i)] <- if (any(duplicated(tmpDat$time))) {
                with(tmpDat, tapply(event, time, sum))
            }
            else {
                tmpDat$event
            }
            res_ij <- ifelse(yVec > 0, y_i_tj/yVec * (n_i_tj - 
                dLambda), 0)
            max_res_ij <- max(abs(res_ij))
            if (max_res_ij > 0) {
                re_res_ij <- res_ij/max_res_ij
                reFactor <- exp(log(max_res_ij) + log(max_w_const))
            }
            else {
                re_res_ij <- 0
                reFactor <- 1
            }
            res_const <- (w_const/max_w_const) * re_res_ij
            res_linear <- (w_linear/max_w_const) * re_res_ij
            c(const = (sum(res_const) * reFactor)^2, linear = (sum(res_linear) * 
                reFactor)^2)
        }
        varList1 <- by(eventDat1[, c("ID", "time", "event", "origin")], 
            eventDat1$ID, FUN = var_comp, yVec = yVec1, dLambda = dLambda1, 
            uniTimeVec = uniTimeVec, w_const = w_const, w_linear = w_linear, 
            max_w_const = max_w_const, simplify = FALSE)
        varList2 <- by(eventDat2[, c("ID", "time", "event", "origin")], 
            eventDat2$ID, FUN = var_comp, yVec = yVec2, dLambda = dLambda2, 
            uniTimeVec = uniTimeVec, w_const = w_const, w_linear = w_linear, 
            max_w_const = max_w_const, simplify = FALSE)
        varU_1 <- if (nrow(mcfDat1) > 1) {
            colSums(do.call(rbind, varList1))
        }
        else {
            do.call(c, varList1)
        }
        varU_2 <- if (nrow(mcfDat2) > 1) {
            colSums(do.call(rbind, varList2))
        }
        else {
            do.call(c, varList2)
        }
        varU <- varU_1 + varU_2
    }
    outTab <- methods::new("mcfDiff.test")
    outTab[, 1L] <- c(testU_const, testU_linear)
    outTab[, 2L] <- varU
    outTab[, 3L] <- outTab[, 1L]^2/outTab[, 2L]
    outTab[, 4L] <- 1
    outTab[, 5L] <- stats::pchisq(outTab[, 3L], df = outTab[, 
        4L], lower.tail = FALSE)
    outTab@testVariance <- testVariance
    outTab
}


mcf0 <- mcf(Recur(t.stop,id, event) ~ chemo, data = Data)
Test_function(mcf0,1800)













